
global:
  imageRegistry: ""
  imagePullSecrets: []
  defaultStorageClass: ""
  storageClass: ""
  security:
    allowInsecureImages: false
  compatibility:
    openshift:
      adaptSecurityContext: auto
kubeVersion: ""
apiVersions: []
nameOverride: ""
fullnameOverride: ""
clusterDomain: cluster.local
commonLabels: {}
commonAnnotations: {}
extraDeploy: []
serviceBindings:
  enabled: false
diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity
image:
  registry: docker.io
  repository: bitnami/kafka
  tag: 3.9.0-debian-12-r10
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: true
extraInit: ""
config: ""
existingConfigmap: ""
extraConfig: ""
extraConfigYaml: {}
secretConfig: ""
existingSecretConfig: ""
log4j: ""
existingLog4jConfigMap: ""
heapOpts: -XX:InitialRAMPercentage=75 -XX:MaxRAMPercentage=75
brokerRackAssignment: ""
brokerRackAssignmentApiVersion: "2023-11-15"
interBrokerProtocolVersion: ""

listeners:
  client:
    containerPort: 9092
    protocol: SASL_PLAINTEXT
    name: CLIENT
    sslClientAuth: "none"
  controller:
    name: CONTROLLER
    containerPort: 9093
    protocol: SASL_PLAINTEXT
    sslClientAuth: "none"
  interbroker:
    containerPort: 9094
    protocol: SASL_PLAINTEXT
    name: INTERNAL
    sslClientAuth: "none"
  external:
    containerPort: 9095
    protocol: SASL_PLAINTEXT
    name: EXTERNAL
    sslClientAuth: "none"
  extraListeners: []
  overrideListeners: ""
  advertisedListeners: ""
  securityProtocolMap: ""

sasl:
  enabledMechanisms: PLAIN
  interBrokerMechanism: PLAIN
  controllerMechanism: PLAIN
  oauthbearer:
    tokenEndpointUrl: ""
    jwksEndpointUrl: ""
    expectedAudience: ""
    subClaimName: "sub"
  interbroker:
    user: inter_broker_user
    password: "admin"
    clientId: inter_broker_client
    clientSecret: ""
  controller:
    user: controller_user
    password: "admin"
    clientId: controller_broker_client
    clientSecret: ""
  client:
    users:
      - admin
    passwords: "admin"
  zookeeper:
    user: ""
    password: ""
  existingSecret: ""

tls:
  type: JKS
  pemChainIncluded: false
  existingSecret: ""
  autoGenerated: false
  customAltNames: []
  passwordsSecret: ""
  passwordsSecretKeystoreKey: keystore-password
  passwordsSecretTruststoreKey: truststore-password
  passwordsSecretPemPasswordKey: ""
  keystorePassword: ""
  truststorePassword: ""
  keyPassword: ""
  jksKeystoreKey: ""
  jksTruststoreSecret: ""
  jksTruststoreKey: ""
  endpointIdentificationAlgorithm: https
  sslClientAuth: "none"

  zookeeper:
    enabled: false
    verifyHostname: true
    existingSecret: ""
    existingSecretKeystoreKey: zookeeper.keystore.jks
    existingSecretTruststoreKey: zookeeper.truststore.jks
    passwordsSecret: ""
    passwordsSecretKeystoreKey: keystore-password
    passwordsSecretTruststoreKey: truststore-password
    keystorePassword: ""
    truststorePassword: ""
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
extraVolumes: []
extraVolumeMounts: []
sidecars: []
initContainers: []
dnsPolicy: ""
dnsConfig: {}

controller:
  replicaCount: 3
  controllerOnly: false
  minId: 0
  zookeeperMigrationMode: false
  config: ""
  existingConfigmap: ""
  extraConfig: ""
  extraConfigYaml: {}
  secretConfig: ""
  existingSecretConfig: ""
  heapOpts: -Xmx1024m -Xms1024m
  command: []
  args: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraContainerPorts: []
  livenessProbe:
    enabled: true
    initialDelaySeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    periodSeconds: 10
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    failureThreshold: 6
    timeoutSeconds: 5
    periodSeconds: 10
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1

  customLivenessProbe: {}

  customReadinessProbe: {}

  customStartupProbe: {}
  lifecycleHooks: {}
  initContainerResources:
    limits: {}
    requests: {}
  resourcesPreset: "small"
  resources: {}
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
    seccompProfile:
      type: "RuntimeDefault"
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["ALL"]

  automountServiceAccountToken: false

  hostAliases: []

  hostNetwork: false

  hostIPC: false

  podLabels: {}

  podAnnotations: {}

  podAffinityPreset: ""

  podAntiAffinityPreset: soft

  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  terminationGracePeriodSeconds: ""
  podManagementPolicy: Parallel
  minReadySeconds: 0
  priorityClassName: ""
  runtimeClassName: ""
  enableServiceLinks: true
  schedulerName: ""
  updateStrategy:
    type: RollingUpdate
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []

  autoscaling:
    vpa:

      enabled: false

      annotations: {}

      controlledResources: []

      maxAllowed: {}

      minAllowed: {}
      updatePolicy:

        updateMode: Auto
    hpa:

      enabled: false

      minReplicas: ""

      maxReplicas: ""

      targetCPU: ""

      targetMemory: ""

  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""

  persistence:

    enabled: true
    existingClaim: ""
    storageClass: ""
    accessModes:
      - ReadWriteOnce

    size: 8Gi

    annotations: {}

    labels: {}

    selector: {}

    mountPath: /bitnami/kafka

  logPersistence:

    enabled: false
    existingClaim: ""
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    annotations: {}
    selector: {}
    mountPath: /opt/bitnami/kafka/logs

broker:
  replicaCount: 0
  minId: 100
  zookeeperMigrationMode: false
  config: ""
  existingConfigmap: ""
  extraConfig: ""
  extraConfigYaml: {}
  secretConfig: ""
  existingSecretConfig: ""
  heapOpts: -Xmx1024m -Xms1024m
  command: []
  args: []
  extraEnvVars: []

  extraEnvVarsCM: ""

  extraEnvVarsSecret: ""

  extraContainerPorts: []
  livenessProbe:
    enabled: true
    initialDelaySeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    periodSeconds: 10
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    failureThreshold: 6
    timeoutSeconds: 5
    periodSeconds: 10
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1

  customLivenessProbe: {}

  customReadinessProbe: {}

  customStartupProbe: {}

  lifecycleHooks: {}
  initContainerResources:
    limits: {}
    requests: {}
  resourcesPreset: "small"
  resources: {}
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
    seccompProfile:
      type: "RuntimeDefault"
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["ALL"]

  automountServiceAccountToken: false

  hostAliases: []

  hostNetwork: false

  hostIPC: false

  podLabels: {}

  podAnnotations: {}

  podAffinityPreset: ""

  podAntiAffinityPreset: soft

  nodeAffinityPreset:

    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}

  tolerations: []

  topologySpreadConstraints: []

  terminationGracePeriodSeconds: ""
  podManagementPolicy: Parallel
  minReadySeconds: 0
  priorityClassName: ""
  runtimeClassName: ""
  enableServiceLinks: true
  schedulerName: ""
  updateStrategy:
    type: RollingUpdate
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  autoscaling:
    vpa:

      enabled: false

      annotations: {}
      controlledResources: []
      maxAllowed: {}
      minAllowed: {}
      updatePolicy:
        updateMode: Auto
    hpa:

      enabled: false

      minReplicas: ""

      maxReplicas: ""

      targetCPU: ""

      targetMemory: ""

  persistence:

    enabled: true

    existingClaim: ""

    storageClass: ""

    accessModes:
      - ReadWriteOnce

    size: 8Gi

    annotations: {}

    labels: {}

    selector: {}

    mountPath: /bitnami/kafka

  logPersistence:

    enabled: false

    existingClaim: ""

    storageClass: ""

    accessModes:
      - ReadWriteOnce

    size: 8Gi

    annotations: {}

    selector: {}

    mountPath: /opt/bitnami/kafka/logs

service:

  type: ClusterIP

  ports:
    client: 9092
    controller: 9093
    interbroker: 9094
    external: 9095

  extraPorts: []

  nodePorts:
    client: ""
    external: ""

  sessionAffinity: None

  sessionAffinityConfig: {}

  clusterIP: ""

  loadBalancerIP: ""

  loadBalancerClass: ""

  loadBalancerSourceRanges: []

  allocateLoadBalancerNodePorts: true

  externalTrafficPolicy: Cluster

  annotations: {}

  headless:
    controller:

      annotations: {}

      labels: {}
    broker:

      annotations: {}

      labels: {}

externalAccess:

  enabled: false
  autoDiscovery:
    enabled: false
    image:
      registry: docker.io
      repository: bitnami/kubectl
      tag: 1.32.2-debian-12-r2
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
    resourcesPreset: "nano"
    resources: {}
    containerSecurityContext:
      enabled: true
      seLinuxOptions: {}
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: "RuntimeDefault"

  controller:
    forceExpose: false
    service:
      type: LoadBalancer
      ports:
        external: 9094
      loadBalancerClass: ""
      loadBalancerIPs: []
      loadBalancerNames: []
      loadBalancerAnnotations: []
      loadBalancerSourceRanges: []
      allocateLoadBalancerNodePorts: true
      nodePorts: []
      externalIPs: []
      useHostIPs: false
      usePodIPs: false
      domain: ""
      publishNotReadyAddresses: false
      labels: {}
      annotations: {}
      extraPorts: []
  broker:
    service:
      type: LoadBalancer
      ports:
        external: 9094
      loadBalancerClass: ""
      loadBalancerIPs: []
      loadBalancerNames: []
      loadBalancerAnnotations: []
      loadBalancerSourceRanges: []
      allocateLoadBalancerNodePorts: true
      nodePorts: []
      externalIPs: []
      useHostIPs: false
      usePodIPs: false
      domain: ""
      publishNotReadyAddresses: false
      labels: {}
      annotations: {}
      extraPorts: []
networkPolicy:
  enabled: true
  allowExternal: true
  allowExternalEgress: true
  addExternalClientAccess: true
  extraIngress: []
  extraEgress: []
  ingressPodMatchLabels: {}
  ingressNSMatchLabels: {}
  ingressNSPodMatchLabels: {}
volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 12-debian-12-r38
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  resourcesPreset: "nano"
  resources: {}
  containerSecurityContext:
    seLinuxOptions: {}
    runAsUser: 0
serviceAccount:
  create: true
  name: ""
  automountServiceAccountToken: false
  annotations: {}
rbac:
  create: false
metrics:
  jmx:
    enabled: false
    kafkaJmxPort: 5555

    image:
      registry: docker.io
      repository: bitnami/jmx-exporter
      tag: 1.1.0-debian-12-r6
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []

    containerSecurityContext:
      enabled: true
      seLinuxOptions: {}
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop: ["ALL"]

    containerPorts:
      metrics: 5556
    resourcesPreset: "micro"

    resources: {}

    livenessProbe:
      enabled: true
      initialDelaySeconds: 60
      periodSeconds: 10
      timeoutSeconds: 10
      successThreshold: 1
      failureThreshold: 3

    readinessProbe:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 10
      successThreshold: 1
      failureThreshold: 3

    service:
      ports:
        metrics: 5556

      clusterIP: ""
      sessionAffinity: None
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.metrics.jmx.service.ports.metrics }}"
        prometheus.io/path: "/metrics"

    whitelistObjectNames:
      - kafka.controller:*
      - kafka.server:*
      - java.lang:*
      - kafka.network:*
      - kafka.log:*

    config: |-
      jmxUrl: service:jmx:rmi:///jndi/rmi://127.0.0.1:{{ .Values.metrics.jmx.kafkaJmxPort }}/jmxrmi
      lowercaseOutputName: true
      lowercaseOutputLabelNames: true
      ssl: false
      {{- if .Values.metrics.jmx.whitelistObjectNames }}
      whitelistObjectNames: ["{{ join "\",\"" .Values.metrics.jmx.whitelistObjectNames }}"]
      {{- end }}

    existingConfigmap: ""

    extraRules: ""

  serviceMonitor:
    enabled: false
    namespace: ""
    path: /metrics

    interval: ""

    scrapeTimeout: ""
    labels: {}
    selector: {}
    relabelings: []
    metricRelabelings: []
    honorLabels: false
    jobLabel: ""
  prometheusRule:
    enabled: false
    namespace: ""
    labels: {}
    groups: []

provisioning:
  enabled: false
  automountServiceAccountToken: false
  numPartitions: 1
  replicationFactor: 1
  topics: []
  nodeSelector: {}
  tolerations: []
  extraProvisioningCommands: []
  parallel: 1
  preScript: ""
  postScript: ""
  auth:
    tls:
      type: jks
      certificatesSecret: ""
      cert: tls.crt
      key: tls.key
      caCert: ca.crt
      keystore: keystore.jks
      truststore: truststore.jks
      passwordsSecret: ""
      keyPasswordSecretKey: key-password
      keystorePasswordSecretKey: keystore-password
      truststorePasswordSecretKey: truststore-password
      keyPassword: ""
      keystorePassword: ""
      truststorePassword: ""

  command: []

  args: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  podAnnotations: {}
  podLabels: {}
  serviceAccount:
    create: true
    name: ""
    automountServiceAccountToken: false

  resourcesPreset: "micro"

  resources: {}
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
    seccompProfile:
      type: "RuntimeDefault"

  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["ALL"]
  schedulerName: ""
  enableServiceLinks: true
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  waitForKafka: true
  useHelmHooks: true
kraft:
  enabled: true
  existingClusterIdSecret: ""
  clusterId: ""
  controllerQuorumVoters: ""

zookeeperChrootPath: ""

zookeeper:

  enabled: false

  replicaCount: 1

  auth:
    client:

      enabled: false
      clientUser: ""
      clientPassword: ""
      serverUsers: ""
      serverPasswords: ""

  persistence:
    enabled: true
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 8Gi

externalZookeeper:
  servers: []
